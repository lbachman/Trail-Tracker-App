// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trail_Tracker_App.Entities;

#nullable disable

namespace Trail_Tracker_App.Migrations
{
    [DbContext(typeof(MountaintrailsContext))]
    partial class MountaintrailsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetusers", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailId" }, "TrailID");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Mountain", b =>
                {
                    b.Property<int>("MountainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MountainID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RangeId")
                        .HasColumnType("int")
                        .HasColumnName("RangeID");

                    b.HasKey("MountainId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RangeId" }, "RangeID");

                    b.ToTable("mountains", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Mountainrange", b =>
                {
                    b.Property<int>("RangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RangeID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RangeId")
                        .HasName("PRIMARY");

                    b.ToTable("mountainranges", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PictureID");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PictureId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailId" }, "TrailID")
                        .HasDatabaseName("TrailID1");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailId" }, "TrailID")
                        .HasDatabaseName("TrailID2");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Trail", b =>
                {
                    b.Property<int>("TrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Length")
                        .HasPrecision(5)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("MountainId")
                        .HasColumnType("int")
                        .HasColumnName("MountainID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TrailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MountainId" }, "MountainID");

                    b.ToTable("trails", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Userfavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailId" }, "TrailID")
                        .HasDatabaseName("TrailID3");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("userfavorites", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Userprofile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserProfileID");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.HasKey("UserProfileId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .IsUnique()
                        .HasDatabaseName("UserID1");

                    b.ToTable("userprofiles", (string)null);
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("TrailID");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("VideoId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailId" }, "TrailID")
                        .HasDatabaseName("TrailID4");

                    b.ToTable("videos", (string)null);
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetroleclaim", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuserclaim", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuserlogin", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetusertoken", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Comment", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Trail", "Trail")
                        .WithMany("Comments")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("comments_ibfk_1");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Mountain", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Mountainrange", "Range")
                        .WithMany("Mountains")
                        .HasForeignKey("RangeId")
                        .HasConstraintName("mountains_ibfk_1");

                    b.Navigation("Range");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Picture", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Trail", "Trail")
                        .WithMany("Pictures")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("pictures_ibfk_1");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Review", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Trail", "Trail")
                        .WithMany("Reviews")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("reviews_ibfk_1");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Trail", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Mountain", "Mountain")
                        .WithMany("Trails")
                        .HasForeignKey("MountainId")
                        .HasConstraintName("trails_ibfk_1");

                    b.Navigation("Mountain");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Userfavorite", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Trail", "Trail")
                        .WithMany("Userfavorites")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("userfavorites_ibfk_2");

                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", "User")
                        .WithMany("Userfavorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userfavorites_ibfk_1");

                    b.Navigation("Trail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Userprofile", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Aspnetuser", "User")
                        .WithOne("Userprofile")
                        .HasForeignKey("Trail_Tracker_App.Entities.Userprofile", "UserId")
                        .HasConstraintName("userprofiles_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Video", b =>
                {
                    b.HasOne("Trail_Tracker_App.Entities.Trail", "Trail")
                        .WithMany("Videos")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("videos_ibfk_1");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetusertokens");

                    b.Navigation("Userfavorites");

                    b.Navigation("Userprofile");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Mountain", b =>
                {
                    b.Navigation("Trails");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Mountainrange", b =>
                {
                    b.Navigation("Mountains");
                });

            modelBuilder.Entity("Trail_Tracker_App.Entities.Trail", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("Reviews");

                    b.Navigation("Userfavorites");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
